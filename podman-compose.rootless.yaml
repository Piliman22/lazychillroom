version: '3.8'

# Podman rootless用設定 - 高ポート版
# 80/443の代わりに8080/8443を使用

services:
  # 環境変数初期化サービス（一度だけ実行）
  init:
    image: docker.io/library/alpine:latest
    command: |
      sh -c '
        # 必要なパッケージをインストール
        apk add --no-cache openssl;
        
        # ドメイン名の確認
        DOMAIN=$${DOMAIN:-};
        
        if [ ! -f /shared/.env.production ]; then
          echo "🔐 環境設定ファイルを生成中...";
          DB_PASSWORD=$$(openssl rand -base64 32 | tr -d "=+/" | cut -c1-32);
          REDIS_PASSWORD=$$(openssl rand -base64 32 | tr -d "=+/" | cut -c1-32);
          JWT_SECRET=$$(openssl rand -base64 64 | tr -d "=+/" | cut -c1-64);
          
          # HTTPS設定
          if [ -n "$$DOMAIN" ]; then
            echo "🔒 HTTPS設定を有効化: $$DOMAIN";
            SSL_ENABLED=true;
            echo "📋 Let'\''s Encrypt証明書は起動後に取得されます";
          else
            echo "🌐 HTTP設定で起動（ドメイン未指定）";
            SSL_ENABLED=false;
          fi
          
          cat > /shared/.env.production << EOF
      NODE_ENV=production
      PORT=3000
      DB_HOST=postgres
      DB_PORT=5432
      DB_USER=lazychillroom_user
      DB_PASSWORD=$$DB_PASSWORD
      DB_NAME=lazychillroom
      POSTGRES_USER=lazychillroom_user
      POSTGRES_PASSWORD=$$DB_PASSWORD
      POSTGRES_DB=lazychillroom
      REDIS_HOST=redis
      REDIS_PORT=6379
      REDIS_PASSWORD=$$REDIS_PASSWORD
      REDIS_DB=0
      JWT_SECRET=$$JWT_SECRET
      UPLOAD_PATH=./uploads
      MAX_FILE_SIZE=10485760
      ALLOWED_EXTENSIONS=jpg,jpeg,png,gif,webp,mp4,webm,pdf,txt,docx
      RATE_LIMIT_WINDOW_MS=60000
      RATE_LIMIT_MAX_REQUESTS=100
      BCRYPT_ROUNDS=12
      TRUST_PROXY=true
      SECURE_COOKIES=$$SSL_ENABLED
      SESSION_SECURE=$$SSL_ENABLED
      SSL_ENABLED=$$SSL_ENABLED
      DOMAIN=$$DOMAIN
      EOF
          echo "✅ 環境設定ファイル生成完了";
          echo "📋 生成されたパスワード:";
          echo "   DB: $$DB_PASSWORD";
          echo "   Redis: $$REDIS_PASSWORD";
          echo "   JWT: $${JWT_SECRET:0:20}...";
          if [ -n "$$DOMAIN" ]; then
            echo "🔒 HTTPS: 有効 ($$DOMAIN)";
          else
            echo "🌐 HTTP: ローカル起動";
          fi
        else
          echo "✅ 環境設定ファイルは既に存在します";
        fi
      '
    environment:
      - DOMAIN=${DOMAIN:-}
    volumes:
      - .:/shared
    restart: "no"

  app:
    build: .
    ports:
      - "3000:3000"
    env_file:
      - .env.production
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres
      - DB_PORT=5432
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - TRUST_PROXY=true
      - SECURE_COOKIES=true
      - SESSION_SECURE=true
    volumes:
      - ./uploads:/app/uploads
      - app_logs:/app/logs
    depends_on:
      init:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    command: npm start
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:exec,nodev,nosuid,size=100m

  postgres:
    image: docker.io/library/postgres:15
    env_file:
      - .env.production
    environment:
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data:Z
      - ./migrations/postgresql-schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
    depends_on:
      init:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U lazychillroom_user -d lazychillroom"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    security_opt:
      - no-new-privileges:true

  redis:
    image: docker.io/library/redis:7-alpine
    env_file:
      - .env.production
    command: |
      sh -c 'redis-server --requirepass "$$REDIS_PASSWORD" --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru'
    volumes:
      - redis_data:/data:Z
    depends_on:
      init:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "sh", "-c", "redis-cli -a \"$$REDIS_PASSWORD\" ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    security_opt:
      - no-new-privileges:true

  # Nginx (高ポート版)
  nginx:
    image: docker.io/library/nginx:alpine
    # 高ポート番号を使用（rootless環境対応）
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - app
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    security_opt:
      - no-new-privileges:true

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local
  nginx_logs:
    driver: local
